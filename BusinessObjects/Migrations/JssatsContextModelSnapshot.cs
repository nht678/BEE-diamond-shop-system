// <auto-generated />
using System;
using BusinessObjects.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(JssatsContext))]
    partial class JssatsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<int>("CounterId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SaleDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BillId");

                    b.HasIndex("CounterId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            BillId = 1,
                            CounterId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = 1,
                            SaleDate = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8870), new TimeSpan(0, 7, 0, 0, 0)),
                            TotalAmount = 500.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = 1
                        },
                        new
                        {
                            BillId = 2,
                            CounterId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = 2,
                            SaleDate = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8873), new TimeSpan(0, 7, 0, 0, 0)),
                            TotalAmount = 1200.0,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.BillJewelry", b =>
                {
                    b.Property<int>("BillJewelryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillJewelryId"));

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<float>("GemSellPrice")
                        .HasColumnType("real");

                    b.Property<float>("GoldSellPrice")
                        .HasColumnType("real");

                    b.Property<float>("GoldWeight")
                        .HasColumnType("real");

                    b.Property<int>("JewelryId")
                        .HasColumnType("int");

                    b.Property<double?>("LaborCost")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("StoneQuantity")
                        .HasColumnType("real");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BillJewelryId");

                    b.HasIndex("BillId");

                    b.HasIndex("JewelryId");

                    b.ToTable("BillJewelries");

                    b.HasData(
                        new
                        {
                            BillJewelryId = 1,
                            BillId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GemSellPrice = 0f,
                            GoldSellPrice = 0f,
                            GoldWeight = 0f,
                            JewelryId = 1,
                            Quantity = 0,
                            StoneQuantity = 0f,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            BillJewelryId = 2,
                            BillId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GemSellPrice = 0f,
                            GoldSellPrice = 0f,
                            GoldWeight = 0f,
                            JewelryId = 2,
                            Quantity = 0,
                            StoneQuantity = 0f,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.BillPromotion", b =>
                {
                    b.Property<int>("BillPromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillPromotionId"));

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BillPromotionId");

                    b.HasIndex("BillId");

                    b.HasIndex("PromotionId");

                    b.ToTable("BillPromotions");

                    b.HasData(
                        new
                        {
                            BillPromotionId = 1,
                            BillId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            BillPromotionId = 2,
                            BillId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PromotionId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Counter", b =>
                {
                    b.Property<int>("CounterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CounterId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CounterId");

                    b.ToTable("Counters");

                    b.HasData(
                        new
                        {
                            CounterId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = 312,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            CounterId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = 231,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            CounterId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = 431,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Ha Noi",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FullName = "Nguyen Van A",
                            Phone = "0123456789",
                            Point = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Ha Noi",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FullName = "Nguyen Van B",
                            Phone = "0123456789",
                            Point = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Ha Noi",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FullName = "Nguyen Van C",
                            Phone = "0123456789",
                            Point = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Gem", b =>
                {
                    b.Property<int>("GemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GemId"));

                    b.Property<float>("BuyPrice")
                        .HasColumnType("real");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<float>("SellPrice")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GemId");

                    b.ToTable("Gems");

                    b.HasData(
                        new
                        {
                            GemId = 1,
                            BuyPrice = 300f,
                            City = "Ha Noi",
                            LastUpdated = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8959), new TimeSpan(0, 7, 0, 0, 0)),
                            SellPrice = 400f,
                            Type = "Ruby"
                        },
                        new
                        {
                            GemId = 2,
                            BuyPrice = 400f,
                            City = "Ha Noi",
                            LastUpdated = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8964), new TimeSpan(0, 7, 0, 0, 0)),
                            SellPrice = 500f,
                            Type = "Sapphire"
                        },
                        new
                        {
                            GemId = 3,
                            BuyPrice = 500f,
                            City = "Ha Noi",
                            LastUpdated = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8967), new TimeSpan(0, 7, 0, 0, 0)),
                            SellPrice = 600f,
                            Type = "Emerald"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Gold", b =>
                {
                    b.Property<int>("GoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoldId"));

                    b.Property<float>("BuyPrice")
                        .HasColumnType("real");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<float>("SellPrice")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GoldId");

                    b.ToTable("Golds");

                    b.HasData(
                        new
                        {
                            GoldId = 1,
                            BuyPrice = 1000f,
                            City = "Ha Noi",
                            LastUpdated = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8995), new TimeSpan(0, 7, 0, 0, 0)),
                            SellPrice = 1200f,
                            Type = "9999"
                        },
                        new
                        {
                            GoldId = 2,
                            BuyPrice = 1200f,
                            City = "Ha Noi",
                            LastUpdated = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(9003), new TimeSpan(0, 7, 0, 0, 0)),
                            SellPrice = 1400f,
                            Type = "SCJ"
                        },
                        new
                        {
                            GoldId = 3,
                            BuyPrice = 1400f,
                            City = "Ha Noi",
                            LastUpdated = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(9006), new TimeSpan(0, 7, 0, 0, 0)),
                            SellPrice = 1600f,
                            Type = "18k"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Jewelry", b =>
                {
                    b.Property<int>("JewelryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JewelryId"));

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsSold")
                        .HasColumnType("bit");

                    b.Property<int>("JewelryTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("LaborCost")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("JewelryId");

                    b.HasIndex("JewelryTypeId");

                    b.ToTable("Jewelries");

                    b.HasData(
                        new
                        {
                            JewelryId = 1,
                            Barcode = "AVC131",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsSold = true,
                            JewelryTypeId = 1,
                            LaborCost = 312.0,
                            Name = "Vong tay",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            JewelryId = 2,
                            Barcode = "SAC132",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsSold = false,
                            JewelryTypeId = 2,
                            LaborCost = 231.0,
                            Name = "Nhan",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.JewelryMaterial", b =>
                {
                    b.Property<int>("JewelryMaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JewelryMaterialId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GemId")
                        .HasColumnType("int");

                    b.Property<int>("GoldId")
                        .HasColumnType("int");

                    b.Property<float>("GoldWeight")
                        .HasColumnType("real");

                    b.Property<int>("JewelryId")
                        .HasColumnType("int");

                    b.Property<float>("StoneQuantity")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("JewelryMaterialId");

                    b.HasIndex("GemId");

                    b.HasIndex("GoldId");

                    b.HasIndex("JewelryId");

                    b.ToTable("JewelryMaterials");

                    b.HasData(
                        new
                        {
                            JewelryMaterialId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GemId = 1,
                            GoldId = 1,
                            GoldWeight = 30f,
                            JewelryId = 1,
                            StoneQuantity = 1f,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            JewelryMaterialId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GemId = 2,
                            GoldId = 2,
                            GoldWeight = 20f,
                            JewelryId = 2,
                            StoneQuantity = 1f,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.JewelryType", b =>
                {
                    b.Property<int>("JewelryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JewelryTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JewelryTypeId");

                    b.ToTable("JewelryTypes");

                    b.HasData(
                        new
                        {
                            JewelryTypeId = 1,
                            Name = "Vong tay"
                        },
                        new
                        {
                            JewelryTypeId = 2,
                            Name = "Nhan"
                        },
                        new
                        {
                            JewelryTypeId = 3,
                            Name = "Day chuyen"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<string>("ApproveManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountRate")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            PromotionId = 1,
                            Description = "Giam gia 10%",
                            DiscountRate = 1.0,
                            EndDate = new DateTimeOffset(new DateTime(2024, 7, 2, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8832), new TimeSpan(0, 7, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8802), new TimeSpan(0, 7, 0, 0, 0)),
                            Type = "Giam gia"
                        },
                        new
                        {
                            PromotionId = 2,
                            Description = "Giam gia 20%",
                            DiscountRate = 2.0,
                            EndDate = new DateTimeOffset(new DateTime(2024, 7, 2, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8840), new TimeSpan(0, 7, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8838), new TimeSpan(0, 7, 0, 0, 0)),
                            Type = "Giam gia"
                        },
                        new
                        {
                            PromotionId = 3,
                            Description = "Giam gia 30%",
                            DiscountRate = 3.0,
                            EndDate = new DateTimeOffset(new DateTime(2024, 7, 2, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8843), new TimeSpan(0, 7, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(8842), new TimeSpan(0, 7, 0, 0, 0)),
                            Type = "Giam gia"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("IsBuyBack")
                        .HasColumnType("int");

                    b.Property<int>("JewelryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PurchaseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("JewelryId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases");

                    b.HasData(
                        new
                        {
                            PurchaseId = 1,
                            CustomerId = 1,
                            IsBuyBack = 0,
                            JewelryId = 1,
                            PurchaseDate = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(9033), new TimeSpan(0, 7, 0, 0, 0)),
                            PurchasePrice = 500.0,
                            UserId = 1
                        },
                        new
                        {
                            PurchaseId = 2,
                            CustomerId = 2,
                            IsBuyBack = 1,
                            JewelryId = 2,
                            PurchaseDate = new DateTimeOffset(new DateTime(2024, 6, 22, 14, 38, 48, 712, DateTimeKind.Unspecified).AddTicks(9035), new TimeSpan(0, 7, 0, 0, 0)),
                            PurchasePrice = 300.0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Staff"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CounterId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CounterId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CounterId = 1,
                            Email = "nghialoe46a2gmail.com",
                            Password = "5678",
                            RoleId = 1,
                            Status = false,
                            Username = "admin Nghia"
                        },
                        new
                        {
                            UserId = 2,
                            CounterId = 2,
                            Email = "JohnDoe@gmail.com",
                            Password = "1234",
                            RoleId = 2,
                            Status = false,
                            Username = "manager John Doe"
                        },
                        new
                        {
                            UserId = 3,
                            CounterId = 3,
                            Email = "Chis@yahho.com",
                            Password = "4321",
                            RoleId = 3,
                            Status = false,
                            Username = "staff Chis Nguyen"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Warranty", b =>
                {
                    b.Property<int>("WarrantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarrantyId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("JewelryId")
                        .HasColumnType("int");

                    b.HasKey("WarrantyId");

                    b.HasIndex("JewelryId")
                        .IsUnique();

                    b.ToTable("Warranties");
                });

            modelBuilder.Entity("BusinessObjects.Models.Bill", b =>
                {
                    b.HasOne("BusinessObjects.Models.Counter", "Counter")
                        .WithMany("Bills")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Customer", "Customer")
                        .WithMany("Bills")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Counter");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.BillJewelry", b =>
                {
                    b.HasOne("BusinessObjects.Models.Bill", "Bill")
                        .WithMany("BillJewelries")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Jewelry", "Jewelry")
                        .WithMany("BillJewelries")
                        .HasForeignKey("JewelryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Jewelry");
                });

            modelBuilder.Entity("BusinessObjects.Models.BillPromotion", b =>
                {
                    b.HasOne("BusinessObjects.Models.Bill", "Bill")
                        .WithMany("BillPromotions")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Promotion", "Promotion")
                        .WithMany("BillPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("BusinessObjects.Models.Jewelry", b =>
                {
                    b.HasOne("BusinessObjects.Models.JewelryType", "JewelryType")
                        .WithMany("Jewelries")
                        .HasForeignKey("JewelryTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JewelryType");
                });

            modelBuilder.Entity("BusinessObjects.Models.JewelryMaterial", b =>
                {
                    b.HasOne("BusinessObjects.Models.Gem", "Gem")
                        .WithMany("JewelryMaterials")
                        .HasForeignKey("GemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Gold", "Gold")
                        .WithMany("JewelryMaterials")
                        .HasForeignKey("GoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Jewelry", "Jewelry")
                        .WithMany("JewelryMaterials")
                        .HasForeignKey("JewelryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Gem");

                    b.Navigation("Gold");

                    b.Navigation("Jewelry");
                });

            modelBuilder.Entity("BusinessObjects.Models.Purchase", b =>
                {
                    b.HasOne("BusinessObjects.Models.Customer", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Jewelry", "Jewelry")
                        .WithMany("Purchases")
                        .HasForeignKey("JewelryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Jewelry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.HasOne("BusinessObjects.Models.Counter", "Counter")
                        .WithMany("Users")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObjects.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Counter");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObjects.Models.Warranty", b =>
                {
                    b.HasOne("BusinessObjects.Models.Jewelry", "Jewelry")
                        .WithOne("Warranty")
                        .HasForeignKey("BusinessObjects.Models.Warranty", "JewelryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Jewelry");
                });

            modelBuilder.Entity("BusinessObjects.Models.Bill", b =>
                {
                    b.Navigation("BillJewelries");

                    b.Navigation("BillPromotions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Counter", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObjects.Models.Customer", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("BusinessObjects.Models.Gem", b =>
                {
                    b.Navigation("JewelryMaterials");
                });

            modelBuilder.Entity("BusinessObjects.Models.Gold", b =>
                {
                    b.Navigation("JewelryMaterials");
                });

            modelBuilder.Entity("BusinessObjects.Models.Jewelry", b =>
                {
                    b.Navigation("BillJewelries");

                    b.Navigation("JewelryMaterials");

                    b.Navigation("Purchases");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("BusinessObjects.Models.JewelryType", b =>
                {
                    b.Navigation("Jewelries");
                });

            modelBuilder.Entity("BusinessObjects.Models.Promotion", b =>
                {
                    b.Navigation("BillPromotions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
